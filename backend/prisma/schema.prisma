// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://LTIdbUser:D1ymf8wyQEGthFR1E9xhCq@localhost:5432/LTIdb"
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]

  @@index([lastName])
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    @db.VarChar(100)
  title         String    @db.VarChar(250)
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  employees Employee[]
  positions Position[]

  @@index([name])
}

model Employee {
  id        Int      @id @default(autoincrement())
  companyId Int
  name      String
  email     String   @unique
  role      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
  interviews Interview[]

  @@index([companyId])
  @@index([role])
}

model PositionStatus {
  id   Int    @id @default(autoincrement())
  name String @unique
  positions Position[]
}

model EmploymentType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  positions Position[]
}

model Position {
  id                 Int              @id @default(autoincrement())
  companyId          Int
  interviewFlowId    Int
  title              String
  description        String?
  statusId           Int
  isVisible          Boolean          @default(true)
  location           String?
  jobDescription     String?
  requirements       String?
  responsibilities   String?
  salaryMin          Float?
  salaryMax          Float?
  employmentTypeId   Int
  benefits           String?
  companyDescription String?
  applicationDeadline DateTime?
  contactInfo        String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  company       Company       @relation(fields: [companyId], references: [id])
  interviewFlow InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  status        PositionStatus @relation(fields: [statusId], references: [id])
  employmentType EmploymentType @relation(fields: [employmentTypeId], references: [id])
  applications  Application[]

  @@index([companyId])
  @@index([interviewFlowId])
  @@index([title])
  @@index([statusId])
}

model InterviewFlow {
  id           Int             @id @default(autoincrement())
  description  String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  positions    Position[]
  steps        InterviewStep[]

  @@index([description])
}

model InterviewType {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  steps       InterviewStep[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String
  orderIndex      Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  interviewFlow InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewType InterviewType @relation(fields: [interviewTypeId], references: [id])
  interviews    Interview[]

  @@index([interviewFlowId])
  @@index([interviewTypeId])
}

model ApplicationStatus {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  applications Application[]
}

model Application {
  id           Int       @id @default(autoincrement())
  positionId   Int
  candidateId  Int
  applicationDate DateTime @default(now())
  statusId     Int
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  position   Position   @relation(fields: [positionId], references: [id])
  candidate  Candidate  @relation(fields: [candidateId], references: [id])
  status     ApplicationStatus @relation(fields: [statusId], references: [id])
  interviews Interview[]

  @@index([positionId])
  @@index([candidateId])
  @@index([statusId])
}

model InterviewResult {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  interviews Interview[]
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  resultId        Int?
  score           Int?          @default(0)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  application   Application   @relation(fields: [applicationId], references: [id])
  interviewStep InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee      Employee      @relation(fields: [employeeId], references: [id])
  result        InterviewResult? @relation(fields: [resultId], references: [id])

  @@index([applicationId])
  @@index([interviewStepId])
  @@index([employeeId])
  @@index([interviewDate])
}